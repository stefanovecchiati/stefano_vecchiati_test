//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `BookList.json`.
    static let bookListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "BookList", pathExtension: "json")
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    
    /// `bundle.url(forResource: "BookList", withExtension: "json")`
    static func bookListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bookListJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Book 10`.
    static let book10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 10")
    /// Image `Book 1`.
    static let book1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 1")
    /// Image `Book 2`.
    static let book2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 2")
    /// Image `Book 3`.
    static let book3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 3")
    /// Image `Book 4`.
    static let book4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 4")
    /// Image `Book 5`.
    static let book5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 5")
    /// Image `Book 6`.
    static let book6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 6")
    /// Image `Book 7`.
    static let book7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 7")
    /// Image `Book 8`.
    static let book8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 8")
    /// Image `Book 9`.
    static let book9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Book 9")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    
    /// `UIImage(named: "Book 1", bundle: ..., traitCollection: ...)`
    static func book1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 10", bundle: ..., traitCollection: ...)`
    static func book10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 2", bundle: ..., traitCollection: ...)`
    static func book2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 3", bundle: ..., traitCollection: ...)`
    static func book3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 4", bundle: ..., traitCollection: ...)`
    static func book4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 5", bundle: ..., traitCollection: ...)`
    static func book5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 6", bundle: ..., traitCollection: ...)`
    static func book6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 7", bundle: ..., traitCollection: ...)`
    static func book7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 8", bundle: ..., traitCollection: ...)`
    static func book8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Book 9", bundle: ..., traitCollection: ...)`
    static func book9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// en translation: Error
      /// 
      /// Locales: en
      static let kErorr = Rswift.StringResource(key: "kErorr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Okay
      /// 
      /// Locales: en
      static let kOkay = Rswift.StringResource(key: "kOkay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func kErorr(_: Void = ()) -> String {
        return NSLocalizedString("kErorr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Okay
      /// 
      /// Locales: en
      static func kOkay(_: Void = ()) -> String {
        return NSLocalizedString("kOkay", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
